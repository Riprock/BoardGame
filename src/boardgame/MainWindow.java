/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Oct 17, 2010, 6:03:53 PM
 */

package boardgame;
import capturegame.board.*;
/**
 *
 * @author fergalhainey
 */
public class MainWindow extends javax.swing.JFrame {

    /** Creates new form MainWindow */
    public MainWindow() {
        this.currentColour = capturegame.board.Board.BLACK;
        initComponents();
        this.errorLabel.setText("");
        final MainWindow mainWindow = this;
        this.boardView.addMoveListener(new capturegame.board.MoveListener() {

            public void moveEvent(int x, int y) {
                mainWindow.makeMove(x, y);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardView = new capturegame.board.BoardView();
        xLabel = new javax.swing.JLabel();
        xText = new javax.swing.JTextField();
        yLabel = new javax.swing.JLabel();
        yText = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        moveLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        boardView.setPreferredSize(new java.awt.Dimension(280, 280));

        org.jdesktop.layout.GroupLayout boardViewLayout = new org.jdesktop.layout.GroupLayout(boardView);
        boardView.setLayout(boardViewLayout);
        boardViewLayout.setHorizontalGroup(
            boardViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 280, Short.MAX_VALUE)
        );
        boardViewLayout.setVerticalGroup(
            boardViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 280, Short.MAX_VALUE)
        );

        xLabel.setText("x:");

        xText.setPreferredSize(new java.awt.Dimension(30, 20));
        xText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonAndOthersActionPerformed(evt);
            }
        });

        yLabel.setText("y:");

        yText.setMinimumSize(new java.awt.Dimension(30, 20));
        yText.setPreferredSize(new java.awt.Dimension(30, 20));
        yText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonAndOthersActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonAndOthersActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText("Error");

        moveLabel.setText("Black's move");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(moveLabel)
                    .add(layout.createSequentialGroup()
                        .add(xLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(xText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(yLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(yText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(submitButton))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, errorLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, boardView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(boardView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(moveLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(xLabel)
                    .add(xText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(yLabel)
                    .add(yText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(submitButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(errorLabel)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonAndOthersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonAndOthersActionPerformed
        makeMove();
    }//GEN-LAST:event_submitButtonAndOthersActionPerformed

    private void makeMove() {
        Board board = this.boardView.getBoard();
        xText.setText(xText.getText().toUpperCase());
        int xCoord = 0;
        int yCoord = 0;
        try {
            // Some char -> short -> int magic. 'A' - 65 = 0. Wahey!
            xCoord = (xText.getText().toCharArray())[0] - 65;
            // 1 based index of board vs. 0 based index of arrays.
            yCoord = Integer.parseInt(yText.getText()) - 1;
        }
        /* Set to illegal positions, that will get picked up by error checking
         * later. Should probably make an error method or something, or
         * different methods for different errors, or one method with an enum
         * argument, or maybe a string argument - less structured but easier?
         * Or maybe throw my own exception class and catch it somewhere from
         * every event - not main method, somehow else. Hmm.
         */
        catch (ArrayIndexOutOfBoundsException e) {
            xCoord = 9;
        }
        catch (NumberFormatException e) {
            yCoord = 9;
        }
        if (
                xCoord >= 0
                && xCoord <= 8
                && yCoord >= 0
                && yCoord <= 8
        ) {
            if (board.getBoardPosition(xCoord, yCoord) == capturegame.board.Board.CLEAR) {
                board.setBoardPosition(xCoord, yCoord, this.currentColour);
                if (this.currentColour == capturegame.board.Board.BLACK) {
                    this.currentColour = capturegame.board.Board.WHITE;
                    this.moveLabel.setText("White's move");
                }
                else {
                    this.currentColour = capturegame.board.Board.BLACK;
                    this.moveLabel.setText("Black's move");
                }
                this.boardView.repaint();
                this.errorLabel.setText("");
            }
            else {
                errorLabel.setText("This position has already been played.");
            }
        }
        else {
            errorLabel.setText("Invalid position.");
        }
    }

    public void makeMove(int x, int y) {
        // See comments in makeMove() for the arithmetic.
        this.xText.setText(new String(new char[] {(char) (x + 65)}));
        this.yText.setText((new Integer(y + 1)).toString());
        this.makeMove();
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private capturegame.board.BoardView boardView;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel xLabel;
    private javax.swing.JTextField xText;
    private javax.swing.JLabel yLabel;
    private javax.swing.JTextField yText;
    // End of variables declaration//GEN-END:variables

    private int currentColour;
}
